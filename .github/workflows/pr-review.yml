name: PR 标签触发多平台构建

on:
  pull_request_target:
    types: [labeled]

jobs:
  build-linux:
    if: github.event.label.name == 'run-build'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR 源分支代码
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # ─── 2. 设置 Python 环境 ────────────────────────────────────────
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      # ─── 3. Checkout 私有仓库 B，并编译 Cython 扩展 ───────────────────
      - name: Checkout private repo B
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper        # ← 改成你真正的 “owner/B”
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: Install B's build dependencies (Linux)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then
            pip install -r B/requirements.txt
          fi

      - name: Build Cython extension from B (Linux)
        run: |
          cd B
          python setup.py build_ext --inplace
          cd ..

      - name: Copy compiled B extension into A's root (Linux)
        run: |
          # 假设 B 编译出的 Cython 模块名以 client_mod 开头，并且后缀是 .so
          cp B/client_mod.*.so . || true

      # ─── 4. 缓存 A 仓库的 pip 依赖 ────────────────────────────────────
      - name: Cache Dependencies (Linux)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ─── 5. 安装 A 仓库所需依赖（含 pyinstaller） ───────────────────────
      - name: Install Dependencies (Linux)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # ─── 6. 使用 PyInstaller 打包成可执行文件 ─────────────────────────
      - name: Build Executable (Linux)
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="sha-${{ github.sha }}"
          fi

          # PyInstaller 会把与 main.py 同目录下的 .so 一并打包
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-Linux_amd64-$VERSION \
            --clean \
            main.py

      # ─── 7. 上传产物 ────────────────────────────────────────────────
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/TomatoNovelDownloader-*

  build-linux-arm64:
    if: github.event.label.name == 'run-build'
    runs-on: ubuntu-24.04-arm  # ARM64 架构
    steps:
      - name: Checkout PR 源分支代码
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      # ─── 3. Checkout 私有仓库 B，并编译 Cython 扩展 ───────────────────
      - name: Checkout private repo B
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper        # ← 改成你真正的 “owner/B”
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: Install B's build dependencies (Linux ARM64)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then
            pip install -r B/requirements.txt
          fi

      - name: Build Cython extension from B (Linux ARM64)
        run: |
          cd B
          python setup.py build_ext --inplace
          cd ..

      - name: Copy compiled B extension into A's root (Linux ARM64)
        run: |
          cp B/client_mod.*.so . || true

      # ─── 4. 缓存 A 仓库的 pip 依赖 ────────────────────────────────────
      - name: Cache Dependencies (Linux ARM64)
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ─── 5. 安装 A 仓库所需依赖（含 pyinstaller） ───────────────────────
      - name: Install Dependencies (Linux ARM64)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # ─── 6. 使用 PyInstaller 打包成可执行文件 ─────────────────────────
      - name: Build Executable (Linux ARM64)
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="sha-${{ github.sha }}"
          fi

          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-Linux_arm64-$VERSION \
            --clean \
            main.py

      # ─── 7. 上传产物 ────────────────────────────────────────────────
      - name: Upload Linux ARM64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-build
          path: dist/TomatoNovelDownloader-*
  
  build-windows:
    if: github.event.label.name == 'run-build'
    runs-on: windows-latest
    steps:
      - name: Checkout PR 源分支代码
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      # ─── 3. Checkout 私有仓库 B，并编译 Cython 扩展（Windows 环境） ─────
      - name: Checkout private repo B
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper        # ← 改成你真正的 “owner/B”
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: Install B's build dependencies (Windows)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if (Test-Path "B\\requirements.txt") {
            pip install -r B\\requirements.txt
          }
        shell: powershell

      - name: Build Cython extension from B (Windows)
        run: |
          cd B
          python setup.py build_ext --inplace
          cd ..
        shell: powershell

      - name: Copy compiled B extension into A's root (Windows)
        run: |
          # 假设 B 编译出的 Cython 模块名以 client_mod 开头，并且后缀是 .pyd
          Copy-Item "B\\client_mod*.pyd" "." -Force
        shell: powershell

      # ─── 4. 缓存 A 仓库的 pip 依赖 ────────────────────────────────────
      - name: Cache Dependencies (Windows)
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ─── 5. 安装 A 仓库所需依赖（含 pyinstaller） ───────────────────────
      - name: Install Dependencies (Windows)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        shell: powershell

      - name: Download UPX (Windows)
        run: |
          $url = "https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-win64.zip"
          Invoke-WebRequest -Uri $url -OutFile upx.zip
          Expand-Archive -Path upx.zip -DestinationPath upx
        shell: powershell

      # ─── 6. 使用 PyInstaller 打包成可执行文件 ─────────────────────────
      - name: Build Executable (Windows)
        run: |
          $upxDir = "$pwd\upx\upx-5.0.0-win64"
        
          if (Test-Path "$upxDir\upx.exe") {
              icacls "$upxDir\upx.exe" /grant Everyone:F
          }

          if ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
          } else {
            $version = "sha-${{ github.sha }}"
          }
        
          pyinstaller --onefile `
            --upx-dir "$upxDir" `
            --collect-data fake_useragent `
            --hidden-import=portalocker `
            -i img/Tomato-downlaoder-ico.ico `
            --name=TomatoNovelDownloader-Win64-$version `
            --clean `
            main.py
        shell: powershell

      # ─── 7. 上传产物 ────────────────────────────────────────────────
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist\TomatoNovelDownloader-*.exe

  build-macos:
    if: github.event.label.name == 'run-build'
    runs-on: macos-latest
    steps:
      - name: Checkout PR 源分支代码
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'

      # ─── 3. Checkout 私有仓库 B，并编译 Cython 扩展（macOS 环境） ────────
      - name: Checkout private repo B
        uses: actions/checkout@v4
        with:
          repository: zhongbai2333/Fanqie-Novel-Official-API-Helper        # ← 改成你真正的 “owner/B”
          token: ${{ secrets.PYD_PAT }}
          path: B

      - name: Install B's build dependencies (macOS)
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          if [ -f B/requirements.txt ]; then
            pip install -r B/requirements.txt
          fi

      - name: Build Cython extension from B (macOS)
        run: |
          cd B
          python setup.py build_ext --inplace
          cd ..

      - name: Copy compiled B extension into A's root (macOS)
        run: |
          cp B/client_mod.*.so . || true

      # ─── 4. 缓存 A 仓库的 pip 依赖 ────────────────────────────────────
      - name: Cache Dependencies (macOS)
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ─── 5. 安装 A 仓库所需依赖（含 pyinstaller） ───────────────────────
      - name: Install Dependencies (macOS)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # ─── 6. 使用 PyInstaller 打包成可执行文件 ─────────────────────────
      - name: Build Executable (macOS)
        run: |         
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="sha-${{ github.sha }}"
          fi

          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-macOS_arm64-$VERSION \
            --clean \
            main.py

      # ─── 7. 上传产物 ────────────────────────────────────────────────
      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/TomatoNovelDownloader-macOS_arm64-*

  build-on-label:
    needs: [build-linux, build-linux-arm64, build-windows, build-macos]
    if: github.event.label.name == 'run-build'
    runs-on: ubuntu-latest

    steps:
      - name: 评论 & 删除标签
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            // 回复构建完成
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `✅ 多平台构建完成，已生成可执行文件。`
            });
            // 删除触发标签
            await github.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              name: context.payload.label.name
            });

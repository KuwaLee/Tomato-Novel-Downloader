name: Refresh Build
on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - build_trigger

permissions:
  contents: write

jobs:
  ## ── 第一步：获取最新 Tag 并删除旧资产，并上传“刷新提示”──
  fetch_and_clean:
    name: 获取最新 Tag 并清理旧资产
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_latest_tag.outputs.Tag }}

    steps:
      - name: Checkout 仓库（完整拉取）
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 获取最新 Tag
        id: get_latest_tag
        run: |
          # 按创建时间排序，取最新 Tag
          LATEST_TAG=$(git for-each-ref --sort=-creatordate --format='%(refname:short)' refs/tags | head -n 1)
          echo "Tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          echo "获取到最新 Tag: $LATEST_TAG"

      - name: 删除该 Tag Release 下所有旧资产
        uses: andreaswilli/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.get_latest_tag.outputs.Tag }}
          deleteOnlyFromDrafts: false

      - name: 创建“刷新提示”文件
        run: |
          echo "刷新构建中，请稍后再试" > refresh_in_progress.txt

      - name: 上传“刷新提示”文件到 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_latest_tag.outputs.Tag }}
          files: |
            refresh_in_progress.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ## ── 并行构建：Linux AMD64 ──
  build-linux:
    name: 构建 Linux AMD64 可执行文件
    needs: fetch_and_clean
    runs-on: ubuntu-latest
    env:
      BUILD_TAG: ${{ needs.fetch_and_clean.outputs.tag }}
    outputs:
      artifact_name: linux_amd64

    steps:
      - name: Checkout 代码 (按最新 Tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.fetch_and_clean.outputs.tag }}

      - name: Setup Python (Linux)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # 省略 Cython 编译、拷贝 .so 文件等步骤…
      - name: 使用 PyInstaller 打包 (Linux AMD64)
        run: |
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-Linux_amd64-${{ env.BUILD_TAG }} \
            --clean \
            main.py

      - name: 上传 Linux AMD64 构建产物 为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux_amd64
          path: dist/TomatoNovelDownloader-Linux_amd64-${{ env.BUILD_TAG }}

      - name: 设置 Artifact 名称输出
        run: |
          echo "artifact_name=linux_amd64" >> "$GITHUB_OUTPUT"

  ## ── 并行构建：Linux ARM64 ──
  build-linux-arm64:
    name: 构建 Linux ARM64 可执行文件
    needs: fetch_and_clean
    runs-on: ubuntu-24.04-arm
    env:
      BUILD_TAG: ${{ needs.fetch_and_clean.outputs.tag }}
    outputs:
      artifact_name: linux_arm64

    steps:
      - name: Checkout 代码 (按最新 Tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.fetch_and_clean.outputs.tag }}

      - name: Setup Python (Linux ARM64)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # 省略 Cython 编译…
      - name: 使用 PyInstaller 打包 (Linux ARM64)
        run: |
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-Linux_arm64-${{ env.BUILD_TAG }} \
            --clean \
            main.py

      - name: 上传 Linux ARM64 构建产物 为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux_arm64
          path: dist/TomatoNovelDownloader-Linux_arm64-${{ env.BUILD_TAG }}

  ## ── 并行构建：Windows ──
  build-windows:
    name: 构建 Windows 可执行文件
    needs: fetch_and_clean
    runs-on: windows-latest
    env:
      BUILD_TAG: ${{ needs.fetch_and_clean.outputs.tag }}
    outputs:
      artifact_name: windows_exe

    steps:
      - name: Checkout 代码 (按最新 Tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.fetch_and_clean.outputs.tag }}

      - name: Setup Python (Windows)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # 省略 Cython 编译、准备 UPX…
      - name: 使用 PyInstaller 打包 (Windows)
        shell: pwsh
        run: |
          pyinstaller --onefile `
            --upx-dir "${{ runner.temp }}\upx" `
            --collect-data fake_useragent `
            --hidden-import=portalocker `
            -i img/Tomato-downlaoder-ico.ico `
            --name=TomatoNovelDownloader-Win64-${{ env.BUILD_TAG }} `
            --clean `
            main.py

      - name: 上传 Windows EXE 构建产物 为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows_exe
          path: dist/TomatoNovelDownloader-Win64-${{ env.BUILD_TAG }}.exe

  ## ── 并行构建：macOS ──
  build-macos:
    name: 构建 macOS 可执行文件
    needs: fetch_and_clean
    runs-on: macos-latest
    env:
      BUILD_TAG: ${{ needs.fetch_and_clean.outputs.tag }}
    outputs:
      artifact_name: macos_bin

    steps:
      - name: Checkout 代码 (按最新 Tag)
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.fetch_and_clean.outputs.tag }}

      - name: Setup Python (macOS)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # 省略 Cython 编译…
      - name: 使用 PyInstaller 打包 (macOS)
        run: |
          pyinstaller \
            --onefile \
            --strip \
            --exclude-module _bootlocale \
            --exclude-module _cffi_backend \
            --collect-data fake_useragent \
            --hidden-import=portalocker \
            -i img/Tomato-downlaoder-ico.ico \
            --name=TomatoNovelDownloader-macOS_arm64-${{ env.BUILD_TAG }} \
            --clean \
            main.py

      - name: 上传 macOS 可执行 构建产物 为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos_bin
          path: dist/TomatoNovelDownloader-macOS_arm64-${{ env.BUILD_TAG }}

  ## ── 最后：下载所有 Artifact 并调用 softprops 上传到 Release ──
  upload_assets:
    name: 下载 Artifact 并发布到 Release
    needs:
      - fetch_and_clean
      - build-linux
      - build-linux-arm64
      - build-windows
      - build-macos
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 占位
        uses: actions/checkout@v4

      - name: 下载 Linux AMD64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux_amd64
          path: ./dist/

      - name: 下载 Linux ARM64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux_arm64
          path: ./dist/

      - name: 下载 Windows EXE Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows_exe
          path: ./dist/

      - name: 下载 macOS 可执行 Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos_bin
          path: ./dist/

      - name: 列出 dist 目录 进行调试
        run: |
          ls -R ./dist/
    
      - name: 删除该 Tag Release 下所有旧资产
        uses: andreaswilli/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.fetch_and_clean.outputs.tag }}
          deleteOnlyFromDrafts: false

      - name: 上传所有构建产物到 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.fetch_and_clean.outputs.tag }}
          files: |
            dist/TomatoNovelDownloader-Linux_amd64-${{ needs.fetch_and_clean.outputs.tag }}
            dist/TomatoNovelDownloader-Linux_arm64-${{ needs.fetch_and_clean.outputs.tag }}
            dist/TomatoNovelDownloader-macOS_arm64-${{ needs.fetch_and_clean.outputs.tag }}
            dist/TomatoNovelDownloader-Win64-${{ needs.fetch_and_clean.outputs.tag }}.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
